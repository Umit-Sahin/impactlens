generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  name                String
  surname             String
  password            String
  role                Role         @default(USER)
  isWhitelisted      Boolean     @default(false)

  // Erişim & Güvenlik
  isActive            Boolean      @default(true)
  isEmailVerified     Boolean      @default(false)
  emailVerifyToken    String?      @unique
  emailVerifiedAt     DateTime?    @db.Timestamp(6)
  lastLoginAt         DateTime?
  loginCount          Int          @default(0)
  lastPasswordChangeAt DateTime?
  twoFactorEnabled    Boolean      @default(false)
  passwordResetToken  String?

  // Ödeme & Plan
  hasActivePayment    Boolean      @default(false)
  onboardingCompleted Boolean      @default(false)
  currentStep         String?      
  planLevel           Plan?        

  // Kullanım & Takip
  profileCompleted    Boolean      @default(false)
  preferredLanguage   String?      
  hasUsedDemo         Boolean      @default(false)
  invitedByUserId     String?
  invitedAt           DateTime?

  // Kurumsal İlişki
  companyId           String?
  company             Company?     @relation(fields: [companyId], references: [id])

  // Sistemsel Alanlar
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // JSON & Esnek Alanlar
  notificationSettings Json?
  metadata             Json?

  // Diğer ilişkiler
  auditLogs           AuditLog[]
  logs                Log[]
  payments            Payment[]
  dataset             UserDataset?
}


model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  plan      Plan
  users     User[]
}

model Log {
  id         String   @id @default(cuid())
  action     String
  ip_address String?
  created_at DateTime @default(now())
  userId     String
  level      String   @default("info")
  user       User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  level     String
  details   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  email     String
}

model UserDataset {
  id          String   @id @default(cuid())
  userId      String   @unique
  domains     String[]
  githubLinks String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  currency        String   @default("USD")
  status          String
  stripePaymentId String   @unique
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model Entity {
  id          String   @id @default(cuid())
  name        String
  description String
  status      String
  location    String
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  DEVELOPER
  SUPER_ADMIN
}

enum Plan {
  BASIC
  PRO
  ENTERPRISE
}
