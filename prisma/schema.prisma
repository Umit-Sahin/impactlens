generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DEVELOPER
  ADMIN
  SUPER_ADMIN
}

enum Plan {
  BASIC
  PRO
  ENTERPRISE
}

model User {
  id               String    @id @default(cuid())
  name             String
  surname          String   
  email            String    @unique
  password         String
  role             Role      @default(USER)
  isEmailVerified  Boolean   @default(false)
  emailVerifyToken String?   @unique
  emailVerifiedAt  DateTime?

  dataset UserDataset?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?
  payments  Payment[]
  logs      Log[]
  auditLogs AuditLog[]
}

model Company {
  id        String   @id @default(cuid())
  name      String
  plan      Plan
  users     User[]
  createdAt DateTime @default(now())
}

model Log {
  id         String   @id @default(cuid())
  action     String
  level      String   @default("info") // info, warning, error, critical
  ip_address String?
  created_at DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String // örn: "DELETE_USER", "UPDATE_ROLE"
  level     String // örn: "info", "warning", "critical"
  details   String // olayla ilgili açıklama veya JSON
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model UserDataset {
  id          String   @id @default(cuid())
  userId      String   @unique
  domains     String[]
  githubLinks String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Payment {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String   @default("USD")
  status          String
  stripePaymentId String   @unique
  createdAt       DateTime @default(now())
}

model Entity {
  id          String   @id @default(cuid())
  name        String
  description String
  status      String   // "active" veya "inactive"
  location    String   // örnek: "Navbar", "Footer" gibi konum bilgisi
  createdAt   DateTime @default(now())
}
