
// ğŸ“„ lib/auth.ts

import { PrismaAdapter } from '@auth/prisma-adapter';
import { AuthOptions } from 'next-auth';
import GitHubProvider from 'next-auth/providers/github';
import CredentialsProvider from 'next-auth/providers/credentials';
import prisma from '@/lib/prisma';
import { compare } from 'bcryptjs';

export const authOptions: AuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        try {
          if (!credentials?.email || !credentials?.password) return null;

          const user = await prisma.user.findUnique({
            where: { email: credentials.email },
          });

          if (!user || !user.password) return null;

          const isValid = await compare(credentials.password, user.password);

          if (!isValid) return null;

          return {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role,
          };
        } catch (error) {
          console.error('[AUTH_ERROR]', error);
          return null;
        }
        if (process.env.NODE_ENV !== 'production') {
          console.log("Ã‡alÄ±ÅŸan ortam (authorize):", process.env.NODE_ENV);
        }
        

      },
    }),
    GitHubProvider({
      clientId: process.env.GITHUB_ID!,
      clientSecret: process.env.GITHUB_SECRET!,
    }),
  ],
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;

        // ğŸ”’ GÃ¼venli cast
        const userWithRole = user as typeof user & { role?: string };
        token.role = userWithRole.role;
      }
      return token;
    },
    async session({ session, token }) {
      // Token iÃ§inden gelen role bilgisini session.user iÃ§ine aktar
      if (session.user) {
        session.user.id = token.id as string;
        session.user.role = token.role as string;
      }
      return session;
    },
  },
  pages: {
    signIn: '/signin',
  },
};



// âœ… Final sÃ¼rÃ¼m: Debug loglarÄ± kaldÄ±rÄ±ldÄ±, sistem kararlÄ± hale getirildi.
// âœ… jwt callback her zaman role deÄŸerini veritabanÄ±ndan Ã§ekerek gÃ¼ncelliyor.
// âœ… SOC 2 uyumlu minimal veri aktarÄ±mÄ± saÄŸlanÄ±yor.


// ğŸ“Œ SOC 2 KRÄ°TERÄ° HATIRLATMA:
// - Hassas veriler (ÅŸifreler) hiÃ§bir zaman client tarafÄ±na taÅŸÄ±nmaz.
// - Token ve session iÃ§inde yalnÄ±zca gerekli, minimal bilgiler tutulur.
// - .env secret deÄŸerleri gizli tutulur ve eriÅŸim loglanÄ±r.
// - Kod deÄŸiÅŸikliklerinde gÃ¼venlik gÃ¶zden geÃ§irmesi yapÄ±lÄ±r.

